{
    "[XXLua] and": {
        "prefix": "and",
        "body": "and",
        "description": "and",
        "scope": "source.lua"
    },
    "[XXLua] break": {
        "prefix": "break",
        "body": "break",
        "description": "break",
        "scope": "source.lua"
    },
    "[XXLua] <close>": {
        "prefix": "<close>",
        "body": "<close>",
        "description": "close lua5.4",
        "scope": "source.lua"
    },
    "[XXLua] close": {
        "prefix": "close",
        "body": "close",
        "description": "close lua5.4",
        "scope": "source.lua"
    },
    "[XXLua] <const>": {
        "prefix": "<const>",
        "body": "<const>",
        "description": "<const> lua5.4",
        "scope": "source.lua"
    },
    "[XXLua] const": {
        "prefix": "const",
        "body": "const",
        "description": "<const> lua5.4",
        "scope": "source.lua"
    },
    "[XXLua] false": {
        "prefix": "false",
        "body": "false",
        "description": "false",
        "scope": "source.lua"
    },
    "[XXLua] in": {
        "prefix": "in",
        "body": "in",
        "description": "in",
        "scope": "source.lua"
    },
    "[XXLua] nil": {
        "prefix": "nil",
        "body": "nil",
        "description": "nil",
        "scope": "source.lua"
    },
    "[XXLua] not": {
        "prefix": "not",
        "body": "not",
        "description": "not",
        "scope": "source.lua"
    },
    "[XXLua] or": {
        "prefix": "or",
        "body": "or",
        "description": "or",
        "scope": "source.lua"
    },
    "[XXLua] repeat": {
        "prefix": "repeat",
        "body": "repeat",
        "description": "repeat",
        "scope": "source.lua"
    },
    "[XXLua] return": {
        "prefix": "return",
        "body": "return",
        "description": "return",
        "scope": "source.lua"
    },
    "[XXLua] true": {
        "prefix": "true",
        "body": "true",
        "description": "true",
        "scope": "source.lua"
    },
    "[XXLua] until": {
        "prefix": "until",
        "body": "until",
        "description": "until",
        "scope": "source.lua"
    },
    "[XXLua] thenend": {
        "prefix": "thenend",
        "body": "then\n\t${0:}\nend",
        "description": "then",
        "scope": "source.lua"
    },
    "[XXLua] then": {
        "prefix": "then",
        "body": "then",
        "description": "then",
        "scope": "source.lua"
    },
    "[XXLua] do": {
        "prefix": "do",
        "body": "do",
        "description": "do",
        "scope": "source.lua"
    },
    "[XXLua] doend": {
        "prefix": "doend",
        "body": "do\n\t${0:}\nend",
        "description": "doend",
        "scope": "source.lua"
    },
    "[XXLua] else": {
        "prefix": "else",
        "body": "else",
        "description": "else",
        "scope": "source.lua"
    },
    "[XXLua] end": {
        "prefix": "end",
        "body": "end",
        "description": "end",
        "scope": "source.lua"
    },
    "[XXLua] local": {
        "prefix": "local",
        "body": "local",
        "description": "local",
        "scope": "source.lua"
    },
    "[XXLua] ret": {
        "prefix": "ret",
        "body": "return ${1:...}",
        "description": "return ...",
        "scope": "source.lua"
    },
    "[XXLua] req": {
        "prefix": "req",
        "body": "require(${1})",
        "description": "require()",
        "scope": "source.lua"
    },
    "[XXLua] require": {
        "prefix": "require",
        "body": "require(${1})",
        "description": "require()",
        "scope": "source.lua"
    },
    "[XXLua] ver": {
        "prefix": "ver",
        "body": "_VERSION",
        "description": "_VERSION",
        "scope": "source.lua"
    },
    "[XXLua] version": {
        "prefix": "version",
        "body": "_VERSION",
        "description": "_VERSION",
        "scope": "source.lua"
    },
    "[XXLua] assert": {
        "prefix": "assert",
        "body": "assert(${1:v}${2:[, message]})",
        "description": "assert()",
        "scope": "source.lua"
    },
    "[XXLua] collectgarbage": {
        "prefix": "collectgarbage",
        "body": "collectgarbage(${1:[opt]}${2:[, arg]})",
        "description": "collectgarbage()",
        "scope": "source.lua"
    },
    "[XXLua] dofile": {
        "prefix": "dofile",
        "body": "dofile(${1:[filename]})",
        "description": "dofile ([filename])",
        "scope": "source.lua"
    },
    "[XXLua] getmetatable": {
        "prefix": "getmetatable",
        "body": "getmetatable(${1:object})",
        "description": "getmetatable (object)",
        "scope": "source.lua"
    },
    "[XXLua] next": {
        "prefix": "next",
        "body": "next(${1:table}${2:[, index]})",
        "description": "next (table [, index])",
        "scope": "source.lua"
    },
    "[XXLua] print": {
        "prefix": "print",
        "body": "print(${1:...})",
        "description": "print(...)",
        "scope": "source.lua"
    },
    "[XXLua] select": {
        "prefix": "select",
        "body": "select(${1:index}, ${2:...})",
        "description": "select (index, ···)",
        "scope": "source.lua"
    },
    "[XXLua] setmetatable": {
        "prefix": "setmetatable",
        "body": "setmetatable(${1:table}, ${2:metatable})",
        "description": "setmetatable (table, metatable)",
        "scope": "source.lua"
    },
    "[XXLua] tonumber": {
        "prefix": "tonumber",
        "body": "tonumber(${1:e}${2:[, base]})",
        "description": "tonumber (e [, base])",
        "scope": "source.lua"
    },
    "[XXLua] tostring": {
        "prefix": "tostring",
        "body": "tostring(${1:v})",
        "description": "tostring (v)",
        "scope": "source.lua"
    },
    "[XXLua] type": {
        "prefix": "type",
        "body": "type(${1:v})",
        "description": "type (v)",
        "scope": "source.lua"
    },

    "[XXLua] table.concat": {
        "prefix": "table.concat",
        "body": "table.concat( ${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index} )",
        "description": "table.concat",
        "scope": "source.lua"
    },
    "[XXLua] table.insert": {
        "prefix": "table.insert",
        "body": "table.insert( ${1:list},${2: [pos,]}${3: value} )",
        "description": "table.insert",
        "scope": "source.lua"
    },
    "[XXLua] table.remove": {
        "prefix": "table.remove",
        "body": "table.remove( ${1:list},${2: [pos,]} )",
        "description": "table.remove",
        "scope": "source.lua"
    },
    "[XXLua] table.sort": {
        "prefix": "table.sort",
        "body": "table.sort( ${1:tablename}${2:, sortfunction} )",
        "description": "table.sort",
        "scope": "source.lua"
    },

    "[XXLua] string.byte": {
        "prefix": "string.byte",
        "body": "string.byte( ${1:s}${2:[, i]}${3:[, j]} )",
        "description": "string.byte",
        "scope": "source.lua"
    },
    "[XXLua] string.char": {
        "prefix": "string.char",
        "body": "string.char( ${1:...} )",
        "description": "string.char",
        "scope": "source.lua"
    },
    "[XXLua] string.find": {
        "prefix": "string.find",
        "body": "string.find( ${1:s},${2:pattern}${3:[, init]}${4:[, plain]} )",
        "description": "string.find",
        "scope": "source.lua"
    },
    "[XXLua] string.format": {
        "prefix": "string.format",
        "body": "string.format( \"${1:formatstring}\",${2:...} )",
        "description": "string.format",
        "scope": "source.lua"
    },
    "[XXLua] string.gmatch": {
        "prefix": "string.gmatch",
        "body": "string.gmatch( ${1:s},${2:pattern} )",
        "description": "string.gmatch",
        "scope": "source.lua"
    },
    "[XXLua] string.gsub": {
        "prefix": "string.gsub",
        "body": "string.gsub( ${1:s},${2:pattern},${3:repl}${4:[, n]} )",
        "description": "string.gsub",
        "scope": "source.lua"
    },
    "[XXLua] string.sub": {
        "prefix": "string.sub",
        "body": "string.sub( ${1:s}, ${2:i}${3:[, j]} )",
        "description": "string.sub",
        "scope": "source.lua"
    },
    "[XXLua] string.len": {
        "prefix": "string.len",
        "body": "string.len( ${1:s} )",
        "description": "string.len",
        "scope": "source.lua"
    },
    "[XXLua] string.lower": {
        "prefix": "string.lower",
        "body": "string.lower( ${1:s} )",
        "description": "string.lower",
        "scope": "source.lua"
    },
    "[XXLua] string.match": {
        "prefix": "string.match",
        "body": "string.match( ${1:s},${2:pattern}${3:[, init]} )",
        "description": "string.match",
        "scope": "source.lua"
    },
    "[XXLua] string.upper": {
        "prefix": "string.upper",
        "body": "string.upper( ${1:s} )",
        "description": "string.upper",
        "scope": "source.lua"
    },
    "[XXLua] string.rep": {
        "prefix": "string.rep",
        "body": "string.rep( ${1:s}, ${2:n}${3:[, rep]} )",
        "description": "string.rep",
        "scope": "source.lua"
    },
    "[XXLua] string.reverse": {
        "prefix": "string.reverse",
        "body": "string.reverse( ${1:s} )",
        "description": "string.reverse",
        "scope": "source.lua"
    },

    "[XXLua] math.abs": {
        "prefix": "math.abs",
        "body": "math.abs( ${1:x} )",
        "description": "math.abs",
        "scope": "source.lua"
    },
    "[XXLua] math.acos": {
        "prefix": "math.acos",
        "body": "math.acos( ${1:x} )",
        "description": "math.acos",
        "scope": "source.lua"
    },
    "[XXLua] math.asin": {
        "prefix": "math.asin",
        "body": "math.asin( ${1:x} )",
        "description": "math.asin",
        "scope": "source.lua"
    },
    "[XXLua] math.ceil": {
        "prefix": "math.ceil",
        "body": "math.ceil( ${1:x} )",
        "description": "math.ceil",
        "scope": "source.lua"
    },
    "[XXLua] math.cos": {
        "prefix": "math.cos",
        "body": "math.cos( ${1:x} )",
        "description": "math.cos",
        "scope": "source.lua"
    },
    "[XXLua] math.deg": {
        "prefix": "math.deg",
        "body": "math.deg( ${1:x} )",
        "description": "math.deg",
        "scope": "source.lua"
    },
    "[XXLua] math.exp": {
        "prefix": "math.exp",
        "body": "math.exp( ${1:x} )",
        "description": "math.exp",
        "scope": "source.lua"
    },
    "[XXLua] math.floor": {
        "prefix": "math.floor",
        "body": "math.floor( ${1:x} )",
        "description": "math.floor",
        "scope": "source.lua"
    },
    "[XXLua] math.modf": {
        "prefix": "math.modf",
        "body": "math.modf( ${1:x} )",
        "description": "math.modf",
        "scope": "source.lua"
    },
    "[XXLua] math.math.randomseed": {
        "prefix": "math.math.randomseed",
        "body": "math.math.randomseed( ${1:x} )",
        "description": "math.math.randomseed",
        "scope": "source.lua"
    },
    "[XXLua] math.sin": {
        "prefix": "math.sin",
        "body": "math.sin( ${1:x} )",
        "description": "math.sin",
        "scope": "source.lua"
    },
    "[XXLua] math.sqrt": {
        "prefix": "math.sqrt",
        "body": "math.sqrt( ${1:x} )",
        "description": "math.sqrt",
        "scope": "source.lua"
    },
    "[XXLua] math.tan": {
        "prefix": "math.tan",
        "body": "math.tan( ${1:x} )",
        "description": "math.tan",
        "scope": "source.lua"
    },
    "[XXLua] math.tointeger": {
        "prefix": "math.tointeger",
        "body": "math.tointeger( ${1:x} )",
        "description": "math.tointeger",
        "scope": "source.lua"
    },
    "[XXLua] math.type": {
        "prefix": "math.type",
        "body": "math.type( ${1:x} )",
        "description": "math.type",
        "scope": "source.lua"
    },
    "[XXLua] math.random": {
        "prefix": "math.random",
        "body": "math.random( ${1:[m]}${2:[, n]} )",
        "description": "math.random",
        "scope": "source.lua"
    },
    "[XXLua] math.log": {
        "prefix": "math.log",
        "body": "math.log( ${1:x}${2:[, base]} )",
        "description": "math.log",
        "scope": "source.lua"
    },
    "[XXLua] math.max": {
        "prefix": "math.max",
        "body": "math.max( ${1:x},${2:...} )",
        "description": "math.max",
        "scope": "source.lua"
    },
    "[XXLua] math.min": {
        "prefix": "math.min",
        "body": "math.min( ${1:x},${2:...} )",
        "description": "math.min",
        "scope": "source.lua"
    },
    "[XXLua] math.fmod": {
        "prefix": "math.fmod",
        "body": "math.fmod( ${1:x},${2:y} )",
        "description": "math.fmod",
        "scope": "source.lua"
    },
    "[XXLua] math.atan": {
        "prefix": "math.atan",
        "body": "math.atan( ${1:y}${2:[, x]} )",
        "description": "math.atan",
        "scope": "source.lua"
    },

    "[XXLua] coroutine.create": {
        "prefix": "coroutine.create",
        "body": "coroutine.create( ${1:function} )",
        "description": "coroutine.create",
        "scope": "source.lua"
    },
    "[XXLua] coroutine.isyieldable": {
        "prefix": "coroutine.isyieldable",
        "body": "coroutine.isyieldable( )",
        "description": "coroutine.isyieldable",
        "scope": "source.lua"
    },
    "[XXLua] coroutine.resume": {
        "prefix": "coroutine.resume",
        "body": "coroutine.resume( ${1:co}${2:[, val1, ···]} )",
        "description": "coroutine.resume",
        "scope": "source.lua"
    },
    "[XXLua] coroutine.running": {
        "prefix": "coroutine.running",
        "body": "coroutine.running( )",
        "description": "coroutine.running",
        "scope": "source.lua"
    },
    "[XXLua] coroutine.status": {
        "prefix": "coroutine.status",
        "body": "coroutine.status( ${1:co} )",
        "description": "coroutine.status",
        "scope": "source.lua"
    },
    "[XXLua] coroutine.wrap": {
        "prefix": "coroutine.wrap",
        "body": "coroutine.wrap( ${1:function} )",
        "description": "coroutine.wrap",
        "scope": "source.lua"
    },
    "[XXLua] coroutine.yield": {
        "prefix": "coroutine.yield",
        "body": "coroutine.yield( ${1:...} )",
        "description": "coroutine.yield",
        "scope": "source.lua"
    },

    "[XXLua] debug.debug": {
        "prefix": "debug.debug",
        "body": "debug.debug()",
        "description": "debug.debug ()",
        "scope": "source.lua"
    },
    "[XXLua] debug.gethook": {
        "prefix": "debug.gethook",
        "body": "debug.gethook( ${1:[thread]} )",
        "description": "debug.gethook ([thread])",
        "scope": "source.lua"
    },
    "[XXLua] debug.getlocal": {
        "prefix": "debug.getlocal",
        "body": "debug.getlocal( ${1:[thread],}${2:f}${3:[, local]} )",
        "description": "debug.getlocal ([thread,] f, local)",
        "scope": "source.lua"
    },
    "[XXLua] debug.getinfo": {
        "prefix": "debug.getinfo",
        "body": "debug.getinfo( ${1:[thread],}${2:f}${3:[, what]} )",
        "description": "debug.getinfo ([thread,] f [, what])",
        "scope": "source.lua"
    },
    "[XXLua] debug.getmetatable": {
        "prefix": "debug.getmetatable",
        "body": "debug.getmetatable( ${1:value} )",
        "description": "debug.getmetatable (value)",
        "scope": "source.lua"
    },
    "[XXLua] debug.getregistry": {
        "prefix": "debug.getregistry",
        "body": "debug.getregistry()",
        "description": "debug.getregistry ()",
        "scope": "source.lua"
    },
    "[XXLua] debug.getupvalue": {
        "prefix": "debug.getupvalue",
        "body": "debug.getupvalue( ${1:f}, ${2:up} )",
        "description": "debug.getupvalue (f, up)",
        "scope": "source.lua"
    },
    "[XXLua] debug.getuservalue ": {
        "prefix": "debug.getuservalue ",
        "body": "debug.getuservalue ( ${1:u} )",
        "description": "debug.getuservalue (u)",
        "scope": "source.lua"
    },
    "[XXLua] debug.sethook": {
        "prefix": "debug.sethook",
        "body": "debug.sethook( ${1:[thead,]}${2:hook}, ${3:mask}${4:[, count]} )",
        "description": "debug.sethook ([thread,] hook, mask [, count])",
        "scope": "source.lua"
    },
    "[XXLua] debug.setlocal": {
        "prefix": "debug.setlocal",
        "body": "debug.setlocal( ${1:[thead,]}${2:level}, ${3:local}, ${4:value} )",
        "description": "debug.setlocal ([thread,] level, local, value)",
        "scope": "source.lua"
    },
    "[XXLua] debug.setmetatable": {
        "prefix": "debug.setmetatable",
        "body": "debug.setmetatable( ${1:value}, ${2:table} )",
        "description": "debug.setmetatable (value, table)",
        "scope": "source.lua"
    },
    "[XXLua] debug.setupvalue": {
        "prefix": "debug.setupvalue",
        "body": "debug.setupvalue( ${1:f}, ${2:up}, ${3:value} )",
        "description": "debug.setupvalue (f, up, value)",
        "scope": "source.lua"
    },
    "[XXLua] debug.setuservalue": {
        "prefix": "debug.setuservalue",
        "body": "debug.setuservalue( ${1:udata}, ${2:value} )",
        "description": "debug.setuservalue (udata, value)",
        "scope": "source.lua"
    },
    "[XXLua] debug.traceback": {
        "prefix": "debug.traceback",
        "body": "debug.traceback( ${1:[thread,]}${2:[message]}${3:[, level]} )",
        "description": "debug.traceback ([thread,] [message [, level]])",
        "scope": "source.lua"
    },
    "[XXLua] debug.upvalueid": {
        "prefix": "debug.upvalueid",
        "body": "debug.upvalueid( ${1:f}, ${2:n})",
        "description": "debug.upvalueid (f, n)",
        "scope": "source.lua"
    },
    "[XXLua] debug.upvaluejoin": {
        "prefix": "debug.upvaluejoin",
        "body": "debug.upvaluejoin( ${1:f1}, ${2:n1}, ${3:f2}, ${4:n2} )",
        "description": "debug.upvaluejoin (f1, n1, f2, n2)",
        "scope": "source.lua"
    }
}